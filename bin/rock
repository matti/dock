#!/usr/bin/env bash

set -e

if [ -z "$ROCK_ENV" ]; then
  export ROCK_ENV=dev
fi

export ROCK_PWD=$(pwd)
current_dirname="$(basename $(pwd))"

export ROCK_IMAGE="rock-$current_dirname"
export COMPOSE_PROJECT_NAME="rock${current_dirname//[^[:alnum:]]/}"

function ensureDependencies() {
  hash docker
  hash docker-compose
}

function ensureInitRun() {
  if [ -e Dockerfile ]; then
    return
  fi

  echo "You need to run 'rock init' first."
  exit 1
}

function ensureImage() {
  if [ "$(docker images -q $ROCK_IMAGE)" == "" ]; then
    echo "You need to run 'rock build' first."
    exit 1
  fi
}

function ensureFunctionalProject() {
  RAILS_VERSION=$(less Gemfile.lock | grep  "[[:space:]]rails (\d\." | awk '{print $2}' | cut -d "(" -f 2 | cut -d ")" -f 1)
  if [[ $RAILS_VERSION =~ ^5\. ]]; then
    if [ -e config/database.yml ]; then
      echo "FATAL: config/database.yml will override ENV['DATABASE_URL'] in Rails 5"
      exit 1
    fi
  fi
}

function dockerComposeRun() {
  if [ -e ".env" ]; then
    env_lines=$(cat .env)
    additional_envs=""
    old_ifs=$IFS
    IFS=$'\n'
    for line in $env_lines; do
      additional_envs+="-e $line "
    done
    IFS=$old_ifs
  fi

  cmd="docker-compose run $additional_envs --rm --service-ports $@"
  debug $cmd

  set +e
  $cmd
  if [ "$?" != 0 ]; then
    created_containers=$(docker ps -a | grep $ROCK_IMAGE | grep Created | grep default_run)
    IFS=$'\n'
    for created_container_line in $created_containers; do
      container_id=$(echo $created_container_line | awk '{print $1}')
      printf "Removing: $(docker rm $container_id)\n"
    done
  fi
  set -e
}

function copyFileFromImage() {
  id=$(docker create $ROCK_IMAGE)
  docker cp $id:/app/$1 $2
  docker rm -v $id
}

function debug() {
  [ -n "$ROCK_DEBUG" ] && echo $@
  true
}

debug "ROCK_PWD: $ROCK_PWD"
debug "ROCK_IMAGE: $ROCK_IMAGE"
debug "COMPOSE_PROJECT_NAME: $COMPOSE_PROJECT_NAME"
debug "--------------------------------------------------------------------"

ensureDependencies

case $1 in
  "networks")
    networks=$(docker network ls)
    printf "$networks"
  ;;
  "containers")
    containers=$(docker ps -a)
    printf "$containers"
  ;;
  "images")
    images=$(docker images)

    case $2 in
      "clean")
        image_lines=$(printf "$images" | tail -n +2)
        IFS=$'\n'
        for image_line in $image_lines; do
          image_name=$(echo $image_line | awk '{print $1}')
          image_id=$(echo $image_line | awk '{print $3}')
          if [[ "$image_name" =~ "$3" ]]; then
            echo "'$3' found in $image_name"
            set +e
            docker rmi -f $image_id
            set -e
          fi

        done
      ;;
      "rm")
        set +e
        docker rmi -f $3
        set -e
      ;;
      *)
        printf "$images" | grep "$2"
      ;;
      "")
        printf "$images"
      ;;
    esac
  ;;
  "port")
    ensureImage

    service=${2:-web}

    id=$(docker-compose run -d --service-ports $service)
    port=$(docker port $id)
    docker-compose stop
    docker stop $id > /dev/null
    docker rm $id > /dev/null

    echo $port | cut -d "/" -f 1
  ;;
  "create")
    template_name=$2
    project_name=$3


    if [ -z $project_name ] || [ -z $template_name ]; then
      echo "Usage: rock create PROJECT TEMPLATE"
      exit 1
    fi

    mkdir $project_name || true
    cd $project_name
    rock init $template_name

    printf "\n\n..done. next up: cd $project_name && rock build\n"
    ;;
  "forward")
    target_port=$2

    if [ -z $target_port ]; then
      target_port=$(rock port)
    fi

    echo "forward 127.0.0.1:80 -> 127.0.0.1:$target_port (requires sudo)"
    sudo -v

    echo "rdr pass inet proto tcp from any to any port 80 -> 127.0.0.1 port $target_port" \
    | sudo pfctl -ef - 2> /dev/null \
    || true

    forward_line=$(sudo pfctl -s nat 2> /dev/null | grep "127.0.0.1 port $target_port")

    if [ "$forward_line" == "" ]; then
      echo "failed."
      exit 1
    else
      echo "ok."
    fi
  ;;
  "init")
    template=$2

    if ! [[ "$template" =~ ^(ruby|sinatra|rails)$ ]]; then
      echo "Usage: rock init {ruby, sinatra, rails}"
      exit 1
    fi

    my_path=$(dirname $(readlink $0))
    template_root_path=$my_path/../templates
    template_path=$template_root_path/$template
    template_add_path=$template_path.add

    echo "Creating files .."
    cp -i -r $template_root_path/base/ . || true
    [ -d $template_path ] && cp -i -r $template_path/ . || true

    if [ -d $template_add_path ]; then
      files=$(ls -a $template_add_path)
      for file in $files; do
        [ "$file" == "." ] && continue   #TODO: betterpattern?
        [ "$file" == ".." ] && continue

        echo "Adding content to $file .."
        contents=$(cat $template_add_path/$file)

        echo "
$contents" >> $file
      done
    fi
  ;;
  "build")
    ensureInitRun
    ensureFunctionalProject

    shift 1
    opts=${@:-}

    docker build $opts --build-arg ROCK_ENV="$ROCK_ENV" --tag $ROCK_IMAGE .
    copyFileFromImage Gemfile.lock .
  ;;
  "clean")
    echo "Stopping.."
    rock stop
    echo "Removing image $ROCK_IMAGE.."
    rock images rm $ROCK_IMAGE

    echo "Removing all project containers.."
    set +e
    containers=$(docker ps -a | grep "$COMPOSE_PROJECT_NAME\_")
    set -e
    IFS=$'\n'
    for container_line in $containers; do
      container_id=$(echo $container_line | awk '{print $1}')
      docker rm $container_id
    done

    echo "Removing all project networks.."
    set +e
    networks=$(docker network ls | grep "$COMPOSE_PROJECT_NAME\_")
    set -e

    IFS=$'\n'
    for network_line in $networks; do
      network_id=$(echo $network_line | awk '{print $1}')
      docker network rm $network_id
    done

    echo "clean."
  ;;
  "logs")
    ensureImage

    shift 1
    docker-compose logs -f $@
    echo "Reminder: this was the logs command, stop processes with: rock stop"
    ;;
  "start"|"s")
    ensureImage
    ensureFunctionalProject

    shift 1
    service=${1:-web}
    shift 1 || true

    dockerComposeRun $service $@
  ;;
  "stop")
    set +e
    containers=$(docker ps -a | grep "$COMPOSE_PROJECT_NAME\_" | grep -v "Exited (0)")
    set -e

    if [ "$containers" == "" ]; then
      echo "Everything stopped."
    else
      echo "Stopping harder.."

      IFS=$'\n'
      for container_line in $containers; do
        container_id=$(echo $container_line | awk '{print $1}')
        docker stop $container_id > /dev/null
        printf "Stopped\n$container_line\n"
      done
    fi
  ;;
  "shell")
    ensureImage
    ensureFunctionalProject

    shift 1
    dockerComposeRun default bash
  ;;
  "diff")
    ensureImage

    rsync_output=$(docker run --rm -v $(pwd):/rock -w /rock $ROCK_IMAGE rsync --exclude-from=.gitignore --exclude-from=.dockerignore --dry-run --delete -acv -i /app/ /rock/)
    rsync_filtered=$(printf "$rsync_output" | grep -v "\s\.\/$") # remove ./

    files_to_add=$(printf "$rsync_filtered" | grep "^*deleting\s" | awk '{print $2}')
    files_to_modify=$(printf "$rsync_filtered" | grep "^>" | awk '{print $2}')

    for file in $files_to_add; do
      printf "A $file\n"
    done

    for file in $files_to_modify; do
      printf "M $file\n"
    done
  ;;
  "exec")
    ensureImage
    ensureFunctionalProject

    shift 1
    service=$1
    shift 1

    dockerComposeRun $service $@
  ;;
  "help"|"usage"|"")
  echo "
  .______  ._______  ._______ .____/\\
  : __   \ : .___  \ :_.  ___\:   /  \\
  |  \____|| :   |  ||  : |/\ |.  ___/
  |   :  \ |     :  ||    /  \|     \\
  |   |___\ \_. ___/ |. _____/|      \\
  |___|       :/      :/      |___\  /
              :       :            \/
"
    echo "Usage:"
    echo ""
    echo "rock create TEMPLATE NAME # Creates a new folder and initializes that with a template"
    echo "rock init                 # Creates .env, Apkfile, docker-compose.yml and Dockerfile"
    echo "rock build ROCK_ENV=dev   # Builds a production container without caches"
    echo "rock start SERVICE=web    # Starts service SERVICE in foreground with dependencies"
    echo "rock logs                 # Shows logs from other processes than the one started with run"
    echo "rock stop                 # Stops all services"
    echo "rock shell                # Starts shell in the image"
    echo "rock CMD                  # Runs CMD in the default service"
    echo ""
    echo "Docker shortcuts:"
    echo ""
    echo "rock images               # List all images"
    echo "rock images clean STARTS  # Delete images that starts with STARTS"
    echo "rock images rm NAME/ID    # Delete image by name or id"
    echo "rock networks             # List all networks"
    echo "rock containers           # List all containers"
    echo ""
    echo "Extended usage:"
    echo "rock compare              # Compares the working directory with the image last built"
    echo "rock exec CMD             # Runs CMD in the container"
    echo "rock clean                # Removes everything"
    echo "rock forward PORT=3000    # Forwards 127.0.0.1:80 to 127.0.0.1:PORT"
    echo "rock port SERVICE=web     # Get the port of SERVICE"

    echo "rock help                 # Usage information"
    exit 1
  ;;
  *)
    ensureImage
    rock exec web $@
  ;;
esac
