#!/usr/bin/env bash

set -e

if [ -z "$ROCK_ENV" ]; then
  export ROCK_ENV=dev
fi

export ROCK_PWD=$(pwd)
export ROCK_IMAGE=$(basename $(pwd))

function ensureDependencies() {
  hash docker
  hash docker-compose
}

function ensureInitRun() {
  if [[ "$1" =~ ^(^$|init|help|create)$ ]]; then
    return
  fi

  if [ -e Dockerfile ]; then
    return
  fi

  echo "You need to run 'rock init' first."
  exit 1
}

function ensureImage() {
  if [[ "$1" =~ ^(^$|help|init|build|create)$ ]]; then
    return
  fi

  if [ "$(docker images -q $ROCK_IMAGE)" == "" ]; then
    echo "You need to run 'rock build' first."
    exit 1
  fi
}

function ensureFunctionalProject() {
  if [[ "$1" =~ ^(^$|help|init|create)$ ]]; then
    return
  fi

  if [ -e config/database.yml ]; then
    echo "config/database.yml will override ENV['DATABASE_URL'], rename or delete it."
    exit 1
  fi
}

function dockerComposeRun() {
  cmd="docker-compose run --rm --service-ports $@"
  debug $cmd

  $cmd
}

function copyFileFromImage() {
  id=$(docker create $ROCK_IMAGE)
  docker cp $id:/app/$1 $2
  docker rm -v $id
}

function debug() {
  [ -n "$ROCK_DEBUG" ] && echo $@
  true
}

ensureDependencies
ensureInitRun $1
ensureImage $1
ensureFunctionalProject $1

case $1 in
  "port")
    service=${2:-web}

    id=$(docker-compose run -d --service-ports $service)
    port=$(docker port $id)
    docker-compose stop
    docker stop $id > /dev/null
    docker rm $id > /dev/null

    echo $port | cut -d "/" -f 1
  ;;
  "create")
    template_name=$2
    project_name=$3


    if [ -z $project_name ] || [ -z $template_name ]; then
      echo "Usage: rock create PROJECT TEMPLATE"
      exit 1
    fi

    mkdir $project_name || true
    cd $project_name
    rock init $template_name

    printf "\n\n..done. next up: cd $project_name && rock build\n"
    ;;
  "forward")
    target_port=$2

    if [ -z $target_port ]; then
      target_port=$(rock port)
    fi

    echo "forward 127.0.0.1:80 -> 127.0.0.1:$target_port (requires sudo)"
    sudo -v

    echo "rdr pass inet proto tcp from any to any port 80 -> 127.0.0.1 port $target_port" \
    | sudo pfctl -ef - 2> /dev/null \
    || true

    forward_line=$(sudo pfctl -s nat 2> /dev/null | grep "127.0.0.1 port $target_port")

    if [ "$forward_line" == "" ]; then
      echo "failed."
      exit 1
    else
      echo "ok."
    fi
  ;;
  "init")
    template=$2

    if ! [[ "$template" =~ ^(ruby|sinatra|rails)$ ]]; then
      echo "Usage: rock init {ruby, sinatra, rails}"
      exit 1
    fi

    my_path=$(dirname $(readlink $0))
    template_root_path=$my_path/../templates
    template_path=$template_root_path/$template
    template_add_path=$template_path.add

    echo "Creating files .."
    cp -i -r $template_root_path/base/ . || true
    [ -d $template_path ] && cp -i -r $template_path/ . || true

    if [ -d $template_add_path ]; then
      files=$(ls -a $template_add_path)
      for file in $files; do
        [ "$file" == "." ] && continue   #TODO: betterpattern?
        [ "$file" == ".." ] && continue

        echo "Adding content to $file .."
        contents=$(cat $template_add_path/$file)

        echo "
$contents" >> $file
      done
    fi
  ;;
  "build")
    current_rock_env=${2:-$ROCK_ENV}

    docker build --build-arg ROCK_ENV="$current_rock_env" --tag $ROCK_IMAGE .
    copyFileFromImage Gemfile.lock .
  ;;
  "clean")
    docker rmi $ROCK_IMAGE
  ;;
  "logs")
    shift 1
    docker-compose logs -f $@
    echo "Reminder: this was the logs command, stop processes with: rock stop"
    ;;
  "start"|"s")
    shift 1
    service=${1:-web}
    shift 1 || true

    dockerComposeRun $service $@
  ;;
  "stop")
    docker-compose stop
  ;;
  "console"|"c")
    shift 1
    dockerComposeRun console
  ;;
  "shell")
    shift 1
    dockerComposeRun default bash
  ;;
  "diff")
    rsync_output=$(docker run --rm -v $(pwd):/rock $ROCK_IMAGE rsync --exclude-from=.gitignore --dry-run --delete -acv -i /app/ /rock/)
    rsync_filtered=$(printf "$rsync_output" | grep -v "\s\.\/$") # remove ./

    files_to_add=$(printf "$rsync_filtered" | grep "^*deleting\s" | awk '{print $2}')
    files_to_modify=$(printf "$rsync_filtered" | grep "^>" | awk '{print $2}')

    for file in $files_to_add; do
      printf "A $file\n"
    done

    for file in $files_to_modify; do
      printf "M $file\n"
    done
  ;;
  "rockbundle")
    shift 1

    docker build --build-arg ROCK_ENV="$ROCK_ENV" --tag $ROCK_IMAGE .
    copyFileFromImage Gemfile.lock .
  ;;
  "exec")
    shift 1
    service=$1
    shift 1
    dockerComposeRun $service $@

    changes=$(rock diff)
    if [ -n "$changes" ]; then
      printf "\n\nUpdating docker image...\n"
      rock build
      #(rock build &> .rock_building && rm .rock_building) &
    fi
  ;;
  "help"|"")
  echo "
  .______  ._______  ._______ .____/\\
  : __   \ : .___  \ :_.  ___\:   /  \\
  |  \____|| :   |  ||  : |/\ |.  ___/
  |   :  \ |     :  ||    /  \|     \\
  |   |___\ \_. ___/ |. _____/|      \\
  |___|       :/      :/      |___\  /
              :       :            \/
"
    echo "Usage:"
    echo ""
    echo "rock create TEMPLATE NAME # Creates a new folder and initializes that with a template"
    echo "rock init                 # Creates .env, Apkfile, docker-compose.yml and Dockerfile"
    echo "rock build ROCK_ENV=dev   # Builds a production container without caches"
    echo "rock start SERVICE=web    # Starts service SERVICE in foreground with dependencies"
    echo "rock logs                 # Shows logs from other processes than the one started with run"
    echo "rock stop                 # Stops all services"
    echo "rock CMD                  # Runs CMD in the default service"
    echo ""
    echo "Extended usage:"
    echo "rock compare              # Compares the working directory with the image last built"
    echo "rock exec CMD             # Runs CMD in the container"
    echo "rock clean                # Removes the image (rock build ignores caches)"
    echo "rock forward PORT=3000    # Forwards 127.0.0.1:80 to 127.0.0.1:PORT"
    echo "rock port SERVICE=web     # Get the port of SERVICE"
    echo "rock help                 # Usage information"
    exit 1
  ;;
  *)
    rock exec default $@
  ;;
esac
