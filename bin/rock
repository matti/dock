#!/usr/bin/env bash

set -e

if [ -z "$ROCK_ENV" ]; then
  export ROCK_ENV=dev
fi

export ROCK_PWD=$(pwd)
export ROCK_IMAGE=$(basename $(pwd))

function ensureDependencies() {
  hash docker
  hash docker-compose
}

function dockerComposeRun() {
  cmd="docker-compose run --rm --service-ports $@"
  debug $cmd

  $cmd
}

function copyFileFromImage() {
  id=$(docker create $ROCK_IMAGE)
  docker cp $id:/home/app/$1 $2
  docker rm -v $id
}

function debug() {
  [ -n "$ROCK_DEBUG" ] && echo $@
  true
}

ensureDependencies

case $1 in
  "port")
    service=${2:-web}

    id=$(docker-compose run -d --service-ports $service)
    port=$(docker port $id)
    docker-compose stop
    docker stop $id > /dev/null
    docker rm $id > /dev/null

    echo $port | cut -d "/" -f 1
  ;;
  "forward")
    target_port=$2
    if [ -z $target_port ]; then
      target_port=$(rock port)
    fi

    echo "forward 127.0.0.1:80 -> 127.0.0.1:$target_port (requires sudo)"
    sudo -v

    echo "rdr pass inet proto tcp from any to any port 80 -> 127.0.0.1 port $target_port" \
    | sudo pfctl -ef - 2> /dev/null \
    || true

    forward_line=$(sudo pfctl -s nat 2> /dev/null | grep "127.0.0.1 port $target_port")

    if [ "$forward_line" == "" ]; then
      echo "failed."
      exit 1
    else
      echo "ok."
    fi
  ;;
  "init")
    MY_DIR=$(dirname $(readlink $0))
    cp -i -r $MY_DIR/../templates/ .
  ;;
  "build")
    docker build . --no-cache --tag $ROCK_IMAGE
    copyFileFromImage Gemfile.lock .
  ;;
  "clean")
    docker rmi $ROCK_IMAGE
  ;;
  "logs")
    shift 1
    docker-compose logs -f $@
    echo "Reminder: this was the logs command, stop processes with: rock stop"
    ;;
  "run")
    shift 1
    service=${1:-web}
    shift 1 || true
    dockerComposeRun $service $@
  ;;
  "stop")
    docker-compose stop
  ;;
  "console")
    shift 1
    dockerComposeRun console
  ;;
  "bundle")
    if [ "$(docker images -q $ROCK_IMAGE)" == "" ]; then
      echo "You need to run 'build' first."
      exit 1
    fi
    shift 1
    docker build --build-arg ROCK_ENV="$ROCK_ENV" --tag $ROCK_IMAGE .
    copyFileFromImage Gemfile.lock .
  ;;
  "exec")
    shift 1
    dockerComposeRun default $@
  ;;
  *)
    echo "Usage:"
    echo ""
    echo "rock init                 # Creates .env, Apkfile, docker-compose.yml and Dockerfile"
    echo "rock build                # Builds a production container without caches"
    echo "rock bundle               # Builds a development container"
    echo "rock run SERVICE=web      # Starts service SERVICE in foreground"
    echo "rock logs                 # Shows logs from other processes than the one started with run"
    echo "rock stop                 # Stops all services"
    echo "rock console              # Runs service console (same as rock exec consolecmd)"
    echo "rock exec CMD             # Runs CMD in the container"
    echo "rock clean                # Removes the image (rock build ignores caches)"
    echo "rock forward PORT=3000    # Forwards 127.0.0.1:80 to 127.0.0.1:PORT"
    echo "rock port SERVICE=web     # Get the port of SERVICE"
    exit 1
  ;;
esac
